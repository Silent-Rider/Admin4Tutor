package com.admin4tutor.bot.service;

import com.admin4tutor.bot.TelegramBot;
import com.admin4tutor.bot.model.DayOfWeek;
import com.admin4tutor.bot.model.Student;
import com.admin4tutor.bot.model.Tutor;
import com.admin4tutor.bot.model.User;

public class AnswerProcessor {
    
    private final TelegramBot bot;
    private final QuestionHandler questionHandler;

    public AnswerProcessor(TelegramBot bot){
        this.bot = bot;
        questionHandler = new QuestionHandler(bot);
    }

    void processRoleAnswer(long chatId, String answer, UserSession session){
        switch (answer) {
            case "üßëüèº‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç" -> {
                session.setUser(new Student());
                session.setStage(Stage.ASKING_FOR_LANGUAGE);
                questionHandler.askForLanguage(chatId, session.getUser());
            }
            case "üßëüèª‚Äçüè´ –Ø —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä" -> {
                session.setUser(new Tutor());
                session.setStage(Stage.ASKING_FOR_LANGUAGE);
                questionHandler.askForLanguage(chatId, session.getUser());
            }
            default -> bot.sendMessage(chatId,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", session.getCurrentKeyboard());
        }
    }

    void processLanguageAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "ENGLISH" -> session.getUser().setLanguage(answer);
            case "GERMAN" -> session.getUser().setLanguage(answer);
            case "FRENCH" -> session.getUser().setLanguage(answer);
            case "SPANISH" -> session.getUser().setLanguage(answer);
            case "ITALIAN" -> session.getUser().setLanguage(answer);
            case "CHINESE" -> session.getUser().setLanguage(answer);
            case "JAPANESE" -> session.getUser().setLanguage(answer);
            case "KOREAN" -> session.getUser().setLanguage(answer);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_NAME);
        questionHandler.askForName(chatId);
    }
    
    void processNameAnswer(long chatId, String answer, UserSession session){
        if(answer.matches("[–ê-–Ø–∞-—è]+? [–ê-–Ø–∞-—è]+?")) session.getUser().setName(answer);
        else {
            bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. " +
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_DATE_OF_BIRTH);
        questionHandler.askForDateOfBirth(chatId);
    }
    
    void processDateOfBirthAnswer(long chatId, String answer, UserSession session){
        if(answer.matches("\\d{2}\\.\\d{2}\\.\\d{4}")) session.getUser().setDateOfBirth(answer);
        else {
            bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. " + 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–î.–ú–ú.–ì–ì–ì–ì\"", session.getCurrentKeyboard());
            return;
        }
        User user = session.getUser();
        if(user instanceof Tutor){
            session.setStage(Stage.ASKING_FOR_AVAILABILITY_DAY);
            questionHandler.askForAvailabilityDay(chatId);
        } else {
            session.setStage(Stage.ASKING_FOR_SCHEDULE_DAY);
            questionHandler.askForScheduleDay(chatId, session.getUser());
        }
    }
    
    void processAvailabilityDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_AVAILABILITY_INTERVALS);
        questionHandler.askForAvailabilityIntervals(chatId, answer);
    }

    void processAvailabilityIntervalsAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = (Tutor) session.getUser();
        if(answer.matches("^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]" + 
        "(, ?([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9])*$"))
        tutor.getAvailability().put(session.getCurrentDayOfWeek(), answer);
        else {
            String text = String.format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤" + 
            "%s: –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú-–ß–ß:–ú–ú\", –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. üï∞%n", 
            session.getCurrentDayOfWeek().getValue()) + "–ü—Ä–∏–º–µ—Ä: 10:45-14:00, 20:00-22:30";
            bot.sendMessage(chatId, text, session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_ANOTHER_AVAILABILITY_DAY);
        questionHandler.askForAnotherAvailabilityDay(chatId, session.getCurrentDayOfWeek(), session);
    }

    void processAnotherAvailabilityDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            case "READY" -> {
                session.setStage(Stage.ASKING_FOR_EMAIL);
                questionHandler.askForEmail(chatId);
                return;
            }
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " + 
                "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_AVAILABILITY_INTERVALS);
        questionHandler.askForAvailabilityIntervals(chatId, answer);
    }

    void processScheduleDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_SCHEDULE_TIME);
        questionHandler.askForScheduleTime(chatId, answer);
    }

    void processScheduleTimeAnswer(long chatId, String answer, UserSession session){
        Student student = (Student) session.getUser();
        if(answer.matches("^([0-1][0-9]|2[0-3]):[0-5][0-9]$"))
        student.getSchedule().put(session.getCurrentDayOfWeek(), answer);
        else {
            String text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏" + String.format("%s: –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú\". üï∞", session.getCurrentDayOfWeek().getValue()) + "\n–ü—Ä–∏–º–µ—Ä: 17:00";
            bot.sendMessage(chatId, text, session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_ANOTHER_SCHEDULE_DAY);
        questionHandler.askForAnotherScheduleDay(chatId, session.getCurrentDayOfWeek(), session);
    }

    void processAnotherScheduleDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            case "READY" -> {
                session.setStage(Stage.ASKING_FOR_TUTOR);
                questionHandler.askForTutor(chatId, session);
                return;
            }
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " + 
                "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_SCHEDULE_TIME);
        questionHandler.askForScheduleTime(chatId, answer);
    }

    void processTutorAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = null;
        for(var suitableTutor: session.getSuitableTutors())
            if(suitableTutor.getName().equals(answer)){
                tutor = suitableTutor;
                break;
            }
        if(tutor == null){
            bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤",
            session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.VIEWING_TUTOR_PAGE);
        questionHandler.viewTutorPage(chatId, tutor);
    }

    void processTutorView(long chatId, String answer, UserSession session){
        switch (answer) {
            case "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" -> {
                session.setStage(Stage.ASKING_FOR_EMAIL);
                questionHandler.askForEmail(chatId);
            }
            case "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É" -> {
                session.setStage(Stage.ASKING_FOR_TUTOR);
                questionHandler.askForTutor(chatId, session);
            }
            default -> bot.sendMessage(chatId,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", session.getCurrentKeyboard());
        }
    }

    void processEmailAnswer(long chatId, String answer, UserSession session){
        if(!answer.equals("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")) session.getUser().setEmail(answer);
        session.setStage(Stage.ASKING_FOR_PHONE_NUMBER);
        questionHandler.askForPhoneNumber(chatId);
    }

    void processPhoneNumberAnswer(long chatId, String answer, UserSession session){
        if(!answer.equals("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")) session.getUser().setEmail(answer);
        if(session.getUser() instanceof Tutor){
            session.setStage(Stage.ASKING_FOR_BIOGRAPHY);
            questionHandler.askForBiography(chatId);
        } else{
            session.setStage(Stage.CREATED_ACCOUNT);
            printInformation(chatId, session.getUser());
        }
    }

    void processBiographyAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = (Tutor) session.getUser();
        if(answer.length() > 15) tutor.setBiography(answer);
        else {
            bot.sendMessage(chatId,"–ë–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤", 
            session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.CREATED_ACCOUNT);
        printInformation(chatId, session.getUser());

    }
    //Just for testing. Remove after!
    void printInformation(long chatId, User user){
        bot.sendMessage(chatId, user.toString(), null);
    }
}
