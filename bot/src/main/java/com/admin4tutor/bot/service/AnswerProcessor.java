package com.admin4tutor.bot.service;

import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Service;

import com.admin4tutor.bot.TelegramBot;
import com.admin4tutor.bot.dto.DayOfWeek;
import com.admin4tutor.bot.dto.Language;
import com.admin4tutor.bot.dto.Student;
import com.admin4tutor.bot.dto.Tutor;
import com.admin4tutor.bot.dto.User;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class AnswerProcessor {
    
    private final TelegramBot bot;
    private final QuestionHandler questionHandler;

    public AnswerProcessor(@Lazy TelegramBot bot, @Lazy QuestionHandler questionHandler){
        this.bot = bot;
        this.questionHandler = questionHandler;
    }

    void processRoleAnswer(long chatId, String answer, UserSession session){
        switch (answer) {
            case "üßëüèº‚Äçüéì –Ø —Å—Ç—É–¥–µ–Ω—Ç" -> {
                session.setUser(new Student(session.getTelegramId()));
                session.setStage(Stage.ASKING_FOR_LANGUAGE);
                questionHandler.askForLanguage(chatId, session.getUser());
            }
            case "üßëüèª‚Äçüè´ –Ø —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä" -> {
                session.setUser(new Tutor(session.getTelegramId()));
                session.setStage(Stage.ASKING_FOR_LANGUAGE);
                questionHandler.askForLanguage(chatId, session.getUser());
            }
            default -> bot.sendMessage(chatId,
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", session.getCurrentKeyboard());
        }
    }

    void processLanguageAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "ENGLISH" -> session.getUser().setLanguage(Language.ENGLISH);
            case "GERMAN" -> session.getUser().setLanguage(Language.GERMAN);
            case "FRENCH" -> session.getUser().setLanguage(Language.FRENCH);
            case "SPANISH" -> session.getUser().setLanguage(Language.SPANISH);
            case "ITALIAN" -> session.getUser().setLanguage(Language.ITALIAN);
            case "CHINESE" -> session.getUser().setLanguage(Language.CHINESE);
            case "JAPANESE" -> session.getUser().setLanguage(Language.JAPANESE);
            case "KOREAN" -> session.getUser().setLanguage(Language.KOREAN);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_NAME);
        questionHandler.askForName(chatId);
    }
    
    void processNameAnswer(long chatId, String answer, UserSession session){
        if(answer.matches("[–ê-–Ø–∞-—èA-Za-z]+? [–ê-–Ø–∞-—èA-Za-z]+?")) session.getUser().setName(answer.trim());
        else {
            bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏. " +
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_DATE_OF_BIRTH);
        questionHandler.askForDateOfBirth(chatId);
    }
    
    void processDateOfBirthAnswer(long chatId, String answer, UserSession session){
        if(answer.matches("^([0-2][0-9]|3[01])\\.(0[1-9]|1[0-2])\\.\\d{4}$")) 
            session.getUser().setDateOfBirth(answer);
        else {
            bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. " + 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–î.–ú–ú.–ì–ì–ì–ì\"", session.getCurrentKeyboard());
            return;
        }
        User user = session.getUser();
        if(user instanceof Tutor){
            session.setStage(Stage.ASKING_FOR_AVAILABILITY_DAY);
            questionHandler.askForAvailabilityDay(chatId);
        } else {
            session.setStage(Stage.ASKING_FOR_SCHEDULE_DAY);
            questionHandler.askForScheduleDay(chatId);
        }
    }
    
    void processAvailabilityDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_AVAILABILITY_INTERVALS);
        questionHandler.askForAvailabilityIntervals(chatId, answer);
    }

    void processAvailabilityIntervalsAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = (Tutor) session.getUser();
        if(answer.matches("^([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9]" + 
        "(, ?([0-1][0-9]|2[0-3]):[0-5][0-9]-([0-1][0-9]|2[0-3]):[0-5][0-9])*$")){
            List<String> intervals = new ArrayList<>(Arrays.asList(answer.split(", ?")));
            for(var interval: intervals){
                String[] times = interval.split("-");
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("HH:mm");
                LocalTime start = LocalTime.parse(times[0], formatter);
                LocalTime end = LocalTime.parse(times[1], formatter);
                if(!start.isBefore(end)){
                    String text = String.format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤%n" + 
                    "–ù–∞—á–∞–ª—å–Ω—ã–π —á–∞—Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–≥–æ%n" +
                    "%s: –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ " + 
                    "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú-–ß–ß:–ú–ú\", –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é üï∞%n", 
                    session.getCurrentDayOfWeek().getValue()) + "–ü—Ä–∏–º–µ—Ä: 10:45-14:00, 20:00-22:30";
                    bot.sendMessage(chatId, text, session.getCurrentKeyboard());
                    return;
                }
            }
            tutor.getAvailability().put(session.getCurrentDayOfWeek(), intervals);
        } else {
            String text = String.format("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤%n" + 
            "%s: –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú-–ß–ß:–ú–ú\", –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é üï∞%n", 
            session.getCurrentDayOfWeek().getValue()) + "–ü—Ä–∏–º–µ—Ä: 10:45-14:00, 20:00-22:30";
            bot.sendMessage(chatId, text, session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_ANOTHER_AVAILABILITY_DAY);
        questionHandler.askForAnotherAvailabilityDay(chatId, session.getCurrentDayOfWeek(), session);
    }

    void processAnotherAvailabilityDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            case "READY" -> {
                session.setStage(Stage.ASKING_FOR_PRICE);
                questionHandler.askForPrice(chatId);
                return;
            }
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " + 
                "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_AVAILABILITY_INTERVALS);
        questionHandler.askForAvailabilityIntervals(chatId, answer);
    }

    void processPriceAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = (Tutor) session.getUser();
        if(answer.matches("\\d+")) tutor.setPrice(Integer.valueOf(answer));
        else {
            bot.sendMessage(chatId, "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã\n".
            concat("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä—É–±–ª—è—Ö üí∞"), session.getCurrentKeyboard());
            return;

        }
        session.setStage(Stage.ASKING_FOR_EMAIL);
        questionHandler.askForEmail(chatId);
    }

    void processScheduleDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_SCHEDULE_TIME);
        questionHandler.askForScheduleTime(chatId, answer);
    }

    void processScheduleTimeAnswer(long chatId, String answer, UserSession session){
        Student student = (Student) session.getUser();
        if(answer.matches("^([0-1][0-9]|2[0-3]):[0-5][0-9]$"))
        student.getSchedule().put(session.getCurrentDayOfWeek(), answer);
        else {
            String text = "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏\n" + String.format("%s: –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú\" üï∞", session.getCurrentDayOfWeek().getValue()) + "\n–ü—Ä–∏–º–µ—Ä: 17:00";
            bot.sendMessage(chatId, text, session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.ASKING_FOR_ANOTHER_SCHEDULE_DAY);
        questionHandler.askForAnotherScheduleDay(chatId, session.getCurrentDayOfWeek(), session);
    }

    void processAnotherScheduleDayAnswer(long chatId, String answer, UserSession session){
        switch(answer) {
            case "MONDAY" -> session.setCurrentDayOfWeek(DayOfWeek.MONDAY);
            case "TUESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.TUESDAY);
            case "WEDNESDAY" -> session.setCurrentDayOfWeek(DayOfWeek.WEDNESDAY);
            case "THURSDAY" -> session.setCurrentDayOfWeek(DayOfWeek.THURSDAY);
            case "FRIDAY" -> session.setCurrentDayOfWeek(DayOfWeek.FRIDAY);
            case "SATURDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SATURDAY);
            case "SUNDAY" -> session.setCurrentDayOfWeek(DayOfWeek.SUNDAY);
            case "READY" -> {
                session.setStage(Stage.ASKING_FOR_EMAIL);
                questionHandler.askForEmail(chatId);
                return;
            }
            default -> {
                bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, " + 
                "–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"",
                session.getCurrentKeyboard());
                return;
            }
        }
        session.setStage(Stage.ASKING_FOR_SCHEDULE_TIME);
        questionHandler.askForScheduleTime(chatId, answer);
    }

    void processEmailAnswer(long chatId, String answer, UserSession session){
        if(!answer.equals("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")) {
            if(!answer.contains("@")){
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã. " +
                "–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª @, " + 
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ" , session.getCurrentKeyboard());
                return;
            } else session.getUser().setEmail(answer);
        }
        session.setStage(Stage.ASKING_FOR_PHONE_NUMBER);
        questionHandler.askForPhoneNumber(chatId);
    }

    void processPhoneNumberAnswer(long chatId, String answer, UserSession session){
        User user = session.getUser();
        if(!answer.equals("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")){
            if(!answer.matches("\\+?[0-9]{5,15}")){
                bot.sendMessage(chatId, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. " +
                "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ü–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9 –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∑–Ω–∞–∫ + –≤–Ω–∞—á–∞–ª–µ, " + 
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ" , session.getCurrentKeyboard());
                return;
            } else user.setPhoneNumber(answer);
        }
        if(user instanceof Tutor){
            session.setStage(Stage.ASKING_FOR_BIOGRAPHY);
            questionHandler.askForBiography(chatId);
        } else{
            session.setStage(Stage.CHECKING_QUESTIONNAIRE_RESULTS);
            questionHandler.askForCheckingQuestionnaireResults(chatId, user);
        }
    }

    void processBiographyAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = (Tutor) session.getUser();
        if(answer.length() > 14) tutor.setBiography(answer);
        else {
            bot.sendMessage(chatId,"–ë–∏–æ–≥—Ä–∞—Ñ–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–µ –º–µ–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤", 
            session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.CHECKING_QUESTIONNAIRE_RESULTS);
        questionHandler.askForCheckingQuestionnaireResults(chatId, tutor);
    }
    
    void processChekingQuestionnaireAnswer(long chatId, String answer, UserSession session){
        User user = session.getUser();
        if(answer.equals("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")){
            session.setStage(Stage.ASKING_FOR_LANGUAGE);
            questionHandler.askForLanguage(chatId, user);
        } else if(answer.equals("–ì–æ—Ç–æ–≤–æ")){
            if(user instanceof Tutor){
                session.setStage(Stage.NOTIFYING_REGISTRATION_RESULTS);
                session.sendUser();
                questionHandler.notifyTutorAboutRegistration(chatId);
            } else{
                session.setStage(Stage.ASKING_FOR_TUTOR);
                questionHandler.askForTutor(chatId, session);
            }
        }
    }

    void processTutorAnswer(long chatId, String answer, UserSession session){
        Tutor tutor = null;
        if(answer.equals("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")){
            session.setStage(Stage.ASKING_FOR_SCHEDULE_DAY);
            questionHandler.askForScheduleDay(chatId);
            return;
        } else if(answer.equals("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")){
            session.setStage(Stage.ASKING_FOR_ROLE);
            bot.startConversation(chatId);
            return;
        }
        for(var suitableTutor: session.getSuitableTutors())
            if(suitableTutor.getName().equals(answer.trim())){
                tutor = suitableTutor;
                session.setCurrentTutor(tutor);
                break;
            }
        if(tutor == null){
            bot.sendMessage(chatId,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤",
            session.getCurrentKeyboard());
            return;
        }
        session.setStage(Stage.VIEWING_TUTOR_PAGE);
        questionHandler.viewTutorPage(chatId, tutor);
    }

    void processTutorView(long chatId, String answer, UserSession session){
        Student student = (Student) session.getUser();
        switch (answer) {
            case "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è" -> {
                Tutor chosenTutor = session.getCurrentTutor();
                student.setTutorId(chosenTutor.getTelegramId());
                session.setStage(Stage.WAITING_FOR_TUTOR_CONFIRMATION);
                processEager(chatId);
                questionHandler.askTutorForConfirmation(chosenTutor, student);
            }
            case "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É" -> {
                session.setStage(Stage.ASKING_FOR_TUTOR);
                questionHandler.askForTutor(chatId, session);
            }
            default -> bot.sendMessage(chatId,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                    session.getCurrentKeyboard());
        }
    }

    void processEager(long chatId){
        bot.sendMessage(chatId, "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞–ø–∏—Å—å, –≤–∞–º –ø—Ä–∏–¥–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ", 
         null);
    }

    void processConfirmation(long chatId, String answer, UserSession session){
        String [] whole = answer.split("/");
        Long studentId = Long.valueOf(whole[1]);
        String choice = whole[0];
        switch(choice){
            case "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å" -> questionHandler.notifyStudentAboutConfirmation(studentId);
            case "–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å" -> questionHandler.notifyStudentAboutRejection(studentId);
            default -> {
                bot.sendMessage(chatId,
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", 
                    session.getCurrentKeyboard());
                    return;
            }
        }
        session.setStage(Stage.MAIN_MENU);
        questionHandler.launchMainMenu(chatId, session);
    }

    void processRegistrationResults(long chatId, String answer, UserSession session){
        if(answer.equals("–ö —Å–ø–∏—Å–∫—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤")){
            session.setStage(Stage.ASKING_FOR_TUTOR);
            questionHandler.askForTutor(chatId, session);
        } else if(answer.equals("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")){
            session.setStage(Stage.MAIN_MENU);
            questionHandler.launchMainMenu(chatId, session);
        }
    }
}
