package com.admin4tutor.bot.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;

import com.admin4tutor.bot.TelegramBot;
import com.admin4tutor.bot.dto.DayOfWeek;
import com.admin4tutor.bot.dto.Language;
import com.admin4tutor.bot.dto.Student;
import com.admin4tutor.bot.dto.Tutor;
import com.admin4tutor.bot.dto.User;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@Service
public class QuestionHandler {
    
    private final TelegramBot bot;

    public QuestionHandler(TelegramBot bot){
        this.bot = bot;
    }

    void askForLanguage(long chatId, User user){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for(int i = 0; i < 4; i++) keyboard.add(new ArrayList<>());
        Language[] languages = Language.values();
        int j = 0;
        for(int i = 0; i < languages.length; i++){
            InlineKeyboardButton button = new InlineKeyboardButton(languages[i].getValue());
            button.setCallbackData(languages[i].toString());
            keyboard.get(j).add(button);
            if((i+1) % 2 == 0) j++;
        }
        keyboardMarkup.setKeyboard(keyboard);
        String text = user instanceof Tutor ? "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞–Ω–∏—è" : "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void askForName(long chatId){
        bot.sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è", null);
    }

    void askForDateOfBirth(long chatId){
        bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–î–î.–ú–ú.–ì–ì–ì–ì\" üóì", null);
    }

    void askForAvailabilityDay(long chatId){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for(int i = 0; i < 4; i++) keyboard.add(new ArrayList<>());
        DayOfWeek[] daysOfWeek = DayOfWeek.values();
        int j = 0;
        for(int i = 0; i < daysOfWeek.length; i++){
            InlineKeyboardButton button = new InlineKeyboardButton(daysOfWeek[i].getValue());
            button.setCallbackData(daysOfWeek[i].toString());
            keyboard.get(j).add(button);
            if((i+1) % 2 == 0) j++;
        }
        keyboardMarkup.setKeyboard(keyboard);
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void askForAvailabilityIntervals(long chatId, String answer){
        DayOfWeek dayOfWeek = null;
        for(DayOfWeek day: DayOfWeek.values())
            if(day.toString().equals(answer)) dayOfWeek = day;
        if(dayOfWeek == null){
            log.error("Lost day of week value");
            return;
        }
        String text = String.format("%s: –£–∫–∞–∂–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú-–ß–ß:–ú–ú\", –ø–µ—Ä–µ—á–∏—Å–ª—è—è –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é üï∞%n", 
            dayOfWeek.getValue()) + "–ü—Ä–∏–º–µ—Ä: 10:45-14:00, 20:00-22:30";
        bot.sendMessage(chatId, text, null);
    }

    void askForAnotherAvailabilityDay(long chatId, DayOfWeek previoisDayOfWeek, UserSession session){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for(int i = 0; i < 4; i++) keyboard.add(new ArrayList<>());
        List<DayOfWeek> daysOfWeek = session.getCurrentDays();
        daysOfWeek.remove(previoisDayOfWeek);
        int j = 0;
        for(int i = 0; i < daysOfWeek.size(); i++){
            InlineKeyboardButton button = new InlineKeyboardButton(daysOfWeek.get(i).getValue());
            button.setCallbackData(daysOfWeek.get(i).toString());
            keyboard.get(j).add(button);
            if((i+1) % 2 == 0) j++;
        }
        if(daysOfWeek.isEmpty())
            session.setCurrentDays(new ArrayList<>(Arrays.asList(DayOfWeek.values())));
        InlineKeyboardButton ready = new InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ");
        ready.setCallbackData("READY");
        keyboard.add(Collections.singletonList(ready));
        keyboardMarkup.setKeyboard(keyboard);
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏," +
        " –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void askForPrice(long chatId){
        bot.sendMessage(chatId, "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É –∑–∞ –∑–∞–Ω—è—Ç–∏–µ –≤ —Ä—É–±–ª—è—Ö üí∞", null);
    }

    void askForScheduleDay(long chatId){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for(int i = 0; i < 4; i++) keyboard.add(new ArrayList<>());
        DayOfWeek[] daysOfWeek = DayOfWeek.values();
        int j = 0;
        for(int i = 0; i < daysOfWeek.length; i++){
            InlineKeyboardButton button = new InlineKeyboardButton(daysOfWeek[i].getValue());
            button.setCallbackData(daysOfWeek[i].toString());
            keyboard.get(j).add(button);
            if((i+1) % 2 == 0) j++;
        }
        keyboardMarkup.setKeyboard(keyboard);
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void askForScheduleTime(long chatId, String answer){
        DayOfWeek dayOfWeek = null;
        for(DayOfWeek day: DayOfWeek.values())
            if(day.toString().equals(answer)) dayOfWeek = day;
        if(dayOfWeek == null){
            log.error("Lost day of week value");
            return;
        }
        String text = String.format("%s: –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è " + 
            "–≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–ß–ß:–ú–ú\" üï∞", dayOfWeek.getValue()) + "\n–ü—Ä–∏–º–µ—Ä: 17:00";
        bot.sendMessage(chatId, text, null);
    }

    void askForAnotherScheduleDay(long chatId, DayOfWeek previoisDayOfWeek, UserSession session){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        for(int i = 0; i < 4; i++) keyboard.add(new ArrayList<>());
        List<DayOfWeek> daysOfWeek = session.getCurrentDays();
        daysOfWeek.remove(previoisDayOfWeek);
        int j = 0;
        for(int i = 0; i < daysOfWeek.size(); i++){
            InlineKeyboardButton button = new InlineKeyboardButton(daysOfWeek.get(i).getValue());
            button.setCallbackData(daysOfWeek.get(i).toString());
            keyboard.get(j).add(button);
            if((i+1) % 2 == 0) j++;
        }
        if(daysOfWeek.isEmpty())
            session.setCurrentDays(new ArrayList<>(Arrays.asList(DayOfWeek.values())));
        InlineKeyboardButton ready = new InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ");
        ready.setCallbackData("READY");
        keyboard.add(Collections.singletonList(ready));
        keyboardMarkup.setKeyboard(keyboard);
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –µ—â–µ –æ–¥–∏–Ω –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π," +
        " –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ \"–ì–æ—Ç–æ–≤–æ\"";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void askForEmail(long chatId){
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        KeyboardButton skip = new KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
        KeyboardRow row = new KeyboardRow(){{add(skip);}};
        List <KeyboardRow> keyboard = Collections.singletonList(row);
        keyboardMarkup.setKeyboard(keyboard);
        bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã ‚úâÔ∏è", keyboardMarkup);
    }

    void askForPhoneNumber(long chatId){
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        KeyboardButton skip = new KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å");
        KeyboardRow row = new KeyboardRow(){{add(skip);}};
        List <KeyboardRow> keyboard = Collections.singletonList(row);
        keyboardMarkup.setKeyboard(keyboard);
        bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû", keyboardMarkup);
    }

    void askForBiography(long chatId){
        bot.sendMessage(chatId, "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∫—Ä–∞—Ç–∫—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é üìô", null);
    }

    void askForCheckingQuestionnaireResults(long chatId, User user){
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        KeyboardButton ready = new KeyboardButton("–ì–æ—Ç–æ–≤–æ");
        KeyboardButton refill = new KeyboardButton("–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ");
        KeyboardRow row = new KeyboardRow(){{ add(ready); add(refill); }};
        List <KeyboardRow> keyboard = Collections.singletonList(row);
        keyboardMarkup.setKeyboard(keyboard);
        switch (user) {
            case Tutor tutor -> {
                var availability = tutor.getAvailability();
                String result = user.toString() + "\nüÜì –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å üÜì";
                for(var day: availability.keySet())
                    result += "\n" + day.getValue() + ": " + (availability.get(day).isEmpty() ? "–∑–∞–Ω—è—Ç"
                     : availability.get(day).toString().replaceAll("[\\[\\]]", ""));
                bot.sendMessage(chatId, result, keyboardMarkup);
            }
            case Student student -> bot.sendMessage(chatId, student.toString(), keyboardMarkup);
            default -> {
                log.error("Lost type of user");
            }
        }
    }

    void askForTutor(long chatId, UserSession session){
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<Tutor> tutors = session.getSuitableTutors();
        if(tutors.isEmpty()){
            ReplyKeyboardMarkup simpleKeyboardMarkup = new ReplyKeyboardMarkup();
            KeyboardRow row1 = new KeyboardRow(){{ add(new KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")); }};
            KeyboardRow row2 = new KeyboardRow(){{ add(new KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ")); }};
            simpleKeyboardMarkup.setKeyboard(Arrays.asList(row1, row2));
            bot.sendMessage(chatId,"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, " +
            "–ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ –Ω–µ—Ç", simpleKeyboardMarkup);
            return;
        }
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        tutors.forEach(x -> {
            InlineKeyboardButton button = new InlineKeyboardButton(x.getName());
            button.setCallbackData(x.getName());
            keyboard.add(Collections.singletonList(button));
        });
        keyboardMarkup.setKeyboard(keyboard);
        String text = "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ –≤–∞—à–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞";
        bot.sendMessage(chatId, text, keyboardMarkup);
    }

    void viewTutorPage(long chatId, Tutor tutor){
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        keyboardMarkup.setResizeKeyboard(true);
        keyboardMarkup.setOneTimeKeyboard(true);
        KeyboardButton register = new KeyboardButton("–ó–∞–ø–∏—Å–∞—Ç—å—Å—è");
        KeyboardButton backToList = new KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É");
        KeyboardRow row = new KeyboardRow(){{add(register); add(backToList);}};
        List <KeyboardRow> keyboard = Collections.singletonList(row);
        keyboardMarkup.setKeyboard(keyboard);
        bot.sendMessage(chatId, tutor.toString(), keyboardMarkup);
    }
}
